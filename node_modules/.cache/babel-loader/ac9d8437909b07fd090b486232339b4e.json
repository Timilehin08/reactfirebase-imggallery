{"ast":null,"code":"import { useState, useEffect } from 'react';\nimport { projectStorage, projectFirestore, timestamp } from '../firebase/config';\n\nconst useStorage = newFile => {\n  const [progress, setProgress] = useState(0);\n  const [error, setError] = useState(null);\n  const [url, setUrl] = useState(null);\n  useEffect(() => {\n    //references \n    const storageRef = projectStorage.ref(newFile);\n    const collectionRef = projectFirestore.collection('images');\n    const lastIndex = file.name.lastIndexOf('.');\n    const cutFromExtension = file.name.slice(lastIndex, file.name.length);\n    const newId = Date.now();\n    const newIdStr = newId.toString();\n    const newFile = newIdStr.concat(cutFromExtension);\n    storageRef.put(file).on('state_changed', snap => {\n      let percentage = snap.bytesTransferred / snap.totalBytes * 100;\n      setProgress(percentage);\n    }, err => {\n      setError(err);\n    }, async () => {\n      const url = await storageRef.getDownloadURL();\n      const createdAt = timestamp();\n      collectionRef.add({\n        url,\n        createdAt\n      });\n      setUrl(url);\n    });\n  }, [file]);\n  return {\n    progress,\n    url,\n    error\n  };\n};\n\nexport default useStorage;","map":{"version":3,"sources":["C:/Users/HP/Desktop/fogogram/src/hooks/useStorage.js"],"names":["useState","useEffect","projectStorage","projectFirestore","timestamp","useStorage","newFile","progress","setProgress","error","setError","url","setUrl","storageRef","ref","collectionRef","collection","lastIndex","file","name","lastIndexOf","cutFromExtension","slice","length","newId","Date","now","newIdStr","toString","concat","put","on","snap","percentage","bytesTransferred","totalBytes","err","getDownloadURL","createdAt","add"],"mappings":"AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,SAASC,cAAT,EAAyBC,gBAAzB,EAA2CC,SAA3C,QAA4D,oBAA5D;;AAEA,MAAMC,UAAU,GAAIC,OAAD,IAAa;AAC5B,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BR,QAAQ,CAAC,CAAD,CAAxC;AACA,QAAM,CAACS,KAAD,EAAQC,QAAR,IAAoBV,QAAQ,CAAC,IAAD,CAAlC;AACA,QAAM,CAACW,GAAD,EAAMC,MAAN,IAAgBZ,QAAQ,CAAC,IAAD,CAA9B;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACZ;AACA,UAAMY,UAAU,GAAGX,cAAc,CAACY,GAAf,CAAmBR,OAAnB,CAAnB;AACA,UAAMS,aAAa,GAAGZ,gBAAgB,CAACa,UAAjB,CAA4B,QAA5B,CAAtB;AAEJ,UAAMC,SAAS,GAAGC,IAAI,CAACC,IAAL,CAAUC,WAAV,CAAsB,GAAtB,CAAlB;AACA,UAAMC,gBAAgB,GAAGH,IAAI,CAACC,IAAL,CAAUG,KAAV,CAAgBL,SAAhB,EAA2BC,IAAI,CAACC,IAAL,CAAUI,MAArC,CAAzB;AACA,UAAMC,KAAK,GAAGC,IAAI,CAACC,GAAL,EAAd;AACA,UAAMC,QAAQ,GAAGH,KAAK,CAACI,QAAN,EAAjB;AACA,UAAMtB,OAAO,GAAGqB,QAAQ,CAACE,MAAT,CAAgBR,gBAAhB,CAAhB;AACIR,IAAAA,UAAU,CAACiB,GAAX,CAAeZ,IAAf,EAAqBa,EAArB,CAAwB,eAAxB,EAA0CC,IAAD,IAAU;AAC/C,UAAIC,UAAU,GAAID,IAAI,CAACE,gBAAL,GAAwBF,IAAI,CAACG,UAA9B,GAA4C,GAA7D;AACA3B,MAAAA,WAAW,CAACyB,UAAD,CAAX;AACH,KAHD,EAGIG,GAAD,IAAS;AACR1B,MAAAA,QAAQ,CAAC0B,GAAD,CAAR;AACH,KALD,EAKG,YAAW;AACV,YAAMzB,GAAG,GAAG,MAAME,UAAU,CAACwB,cAAX,EAAlB;AACA,YAAMC,SAAS,GAAGlC,SAAS,EAA3B;AACAW,MAAAA,aAAa,CAACwB,GAAd,CAAkB;AAAE5B,QAAAA,GAAF;AAAO2B,QAAAA;AAAP,OAAlB;AACA1B,MAAAA,MAAM,CAACD,GAAD,CAAN;AACH,KAVD;AAWH,GArBQ,EAqBN,CAACO,IAAD,CArBM,CAAT;AAuBA,SAAO;AAAEX,IAAAA,QAAF;AAAYI,IAAAA,GAAZ;AAAiBF,IAAAA;AAAjB,GAAP;AAEH,CA9BD;;AAgCA,eAAeJ,UAAf","sourcesContent":["import { useState, useEffect } from 'react';\r\nimport { projectStorage, projectFirestore, timestamp } from '../firebase/config';\r\n\r\nconst useStorage = (newFile) => {\r\n    const [progress, setProgress] = useState(0);\r\n    const [error, setError] = useState(null);\r\n    const [url, setUrl] = useState(null);\r\n\r\n    useEffect(() => {\r\n        //references \r\n        const storageRef = projectStorage.ref(newFile);\r\n        const collectionRef = projectFirestore.collection('images');\r\n\r\n\t\t\t\tconst lastIndex = file.name.lastIndexOf('.');\r\n\t\t\t\tconst cutFromExtension = file.name.slice(lastIndex, file.name.length);\r\n\t\t\t\tconst newId = Date.now();\r\n\t\t\t\tconst newIdStr = newId.toString()\r\n\t\t\t\tconst newFile = newIdStr.concat(cutFromExtension)\r\n        storageRef.put(file).on('state_changed', (snap) => {\r\n            let percentage = (snap.bytesTransferred / snap.totalBytes) * 100;\r\n            setProgress(percentage);\r\n        }, (err) => {\r\n            setError(err);\r\n        }, async() => {\r\n            const url = await storageRef.getDownloadURL();\r\n            const createdAt = timestamp();\r\n            collectionRef.add({ url, createdAt });\r\n            setUrl(url);\r\n        })\r\n    }, [file]);\r\n\r\n    return { progress, url, error }\r\n\r\n}\r\n\r\nexport default useStorage;"]},"metadata":{},"sourceType":"module"}